<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">

  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />


  <title>Moderator Hub</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 2rem;
      max-width: 1000px;  /* ‚úÖ or remove this line entirely */
      margin: auto;
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
        max-width: 100%;
      }
    }

    .tag-entry {
      width: 100%;
      display: flex;
      align-items: center;
      gap: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #ccc;
    }



    .info-box {
      padding: 1rem;
      border-radius: 10px;
      margin-bottom: 1rem;
    }

    #moderator-container button {
      padding: 10px 16px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }

    body.dark-mode #moderator-container {
      background-color: #1e1e1e;
      color: #f0f0f0;
      border: 1px solid #333;
    }
    

    button:hover {
      background-color: #1e7e34;
    }
  </style>
  <link rel="stylesheet" href="/style.css" />
  <link rel="stylesheet" href="/css/bottom-nav.css" />
</head>
<body>

  <div id="moderator-container">
  <h2>üõ†Ô∏è Moderator Hub</h2>

  <div class="info-box">
    <p><strong>Welcome, Moderator!</strong></p>
    <p>Future tools and moderation actions will go here.</p>
  </div>

  <div id="pendingTagsContainer">
    <h3>Pending Tag Submissions</h3>

    <div id="bulkControls" style="margin-bottom: 1rem;">
      <button onclick="selectAllChecks()">‚òëÔ∏è Select All</button>
      <button onclick="unselectAllChecks()">üö´ Unselect All</button>
      <button onclick="bulkModerate('approve')">üü¢ Bulk Approve</button>
      <button onclick="bulkModerate('deny')">üî¥ Bulk Deny</button>
    </div>


    <div id="pendingTagsList">Loading...</div>
  </div>  
</div>

  <script>
    function logout() {
      fetch('/api/logout').then(() => location.href = '/login');
    }
  </script>

<script>
  async function fetchPendingTags() {
    const list = document.getElementById('pendingTagsList');
    list.innerHTML = 'Loading...';

    try {
      const res = await fetch('/api/mod/tags/pending');
      const data = await res.json();

      if (!res.ok || !Array.isArray(data)) throw new Error();

      if (data.length === 0) {
        list.innerHTML = '<p>No pending submissions!</p>';
        return;
      }

      list.innerHTML = '';
      data.forEach(sub => {
        const entryDiv = document.createElement('div');

        //Batch Checkboxes
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.classList.add('bulk-check');
        checkbox.value = sub._id;
        checkbox.style.marginRight = '10px';

        entryDiv.appendChild(checkbox);
        entryDiv.classList.add('tag-entry');
        entryDiv.style.display = 'flex';
        entryDiv.style.alignItems = 'center';
        entryDiv.style.marginBottom = '1rem';
        entryDiv.style.borderBottom = '1px solid #ccc';
        entryDiv.style.paddingBottom = '0.5rem';
        entryDiv.style.gap = '1rem';

/*         const cardImage = document.createElement('img');
        cardImage.src = `https://images.pokemontcg.io/${sub.cardId.split('-')[0]}/${sub.cardId.split('-')[1]}.png`;
        cardImage.alt = sub.cardId;
        cardImage.style.height = '80px';
        cardImage.style.cursor = 'pointer';
        cardImage.style.flexShrink = '0'; */

        const imageWrapper = document.createElement('div');
        imageWrapper.style.display = 'flex';
        imageWrapper.style.flexDirection = 'column';
        imageWrapper.style.alignItems = 'center';
        imageWrapper.style.minWidth = '100px';

        const nameLabel = document.createElement('p');
        nameLabel.textContent = sub.cardName || 'Unknown';
        nameLabel.style.margin = '0 0 4px 0';
        nameLabel.style.fontWeight = 'bold';
        nameLabel.style.fontSize = '0.9rem';
        nameLabel.style.textAlign = 'center';

        const cardImage = document.createElement('img');
        cardImage.src = `https://images.pokemontcg.io/${sub.cardId.split('-')[0]}/${sub.cardId.split('-')[1]}.png`;
        cardImage.alt = sub.cardId;
        cardImage.style.height = '80px';
        cardImage.style.cursor = 'pointer';
        cardImage.style.flexShrink = '0';

        cardImage.addEventListener('click', async () => {
          try {
            const res = await fetch(`https://api.pokemontcg.io/v2/cards/${sub.cardId}`);
            const data = await res.json();
            openCardPopup(data.data, { mode: 'view' });
          } catch (err) {
            console.error('‚ùå Failed to load card for popup:', err);
          }
        });

        imageWrapper.appendChild(nameLabel);
        imageWrapper.appendChild(cardImage);


        cardImage.addEventListener('click', async () => {
          try {
            const res = await fetch(`https://api.pokemontcg.io/v2/cards/${sub.cardId}`);
            const data = await res.json();
            openCardPopup(data.data, { mode: 'view' });
          } catch (err) {
            console.error('‚ùå Failed to load card for popup:', err);
          }
        });

        const infoDiv = document.createElement('div');
        infoDiv.innerHTML = `
          <p><strong>Card:</strong> ${sub.cardId}</p>
          <p><strong>Tag:</strong> ${sub.tag}</p>
          <p><strong>Submitted By:</strong> ${sub.submittedBy?.username || 'Unknown'}</p>
          <p><strong>Date:</strong> ${new Date(sub.createdAt).toLocaleString()}</p>
          <button onclick="moderateTag('${sub._id}', 'approve')">‚úÖ Approve</button>
          <button onclick="moderateTag('${sub._id}', 'deny')">‚ùå Deny</button>
        `;

        // entryDiv.appendChild(cardImage);
        entryDiv.appendChild(imageWrapper);

        entryDiv.appendChild(infoDiv);
        list.appendChild(entryDiv);
      });

    } catch (err) {
      list.innerHTML = '<p>Error loading submissions.</p>';
      console.error(err);
    }
  }

  async function moderateTag(id, action) {
    try {
      const res = await fetch(`/api/mod/newtags/${id}/${action}`, { method: 'POST' });
      if (res.ok) {
        fetchPendingTags(); // refresh list
      } else {
        alert('Failed to update tag status.');
      }
    } catch (err) {
      console.error('Moderation failed:', err);
    }
  }

  //Batch buttons
  function selectAllChecks() {
  document.querySelectorAll('.bulk-check').forEach(cb => cb.checked = true);
}

function unselectAllChecks() {
  document.querySelectorAll('.bulk-check').forEach(cb => cb.checked = false);
}

async function bulkModerate(action) {
  const selected = Array.from(document.querySelectorAll('.bulk-check:checked')).map(cb => cb.value);

  if (selected.length === 0) {
    alert('Please select at least one submission.');
    return;
  }

  const confirmMsg = action === 'approve'
    ? `Approve ${selected.length} selected submission(s)?`
    : `Deny ${selected.length} selected submission(s)?`;

  if (!confirm(confirmMsg)) return;

  for (const id of selected) {
    try {
      await fetch(`/api/mod/newtags/${id}/${action}`, { method: 'POST' });
    } catch (err) {
      console.error(`‚ùå Failed to ${action} tag ID: ${id}`, err);
    }
  }

  // Refresh after processing
  fetchPendingTags();
}


  // Initial load
  fetchPendingTags();
</script>

<script type="module" src="/js/script.js"></script>
  
</body>
</html>
