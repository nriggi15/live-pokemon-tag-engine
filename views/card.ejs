<!DOCTYPE html>
<html lang="en">
<head>
  <title><%= card.name %> | Pok√©mon Card</title>
  <link rel="stylesheet" href="/style.css" />
  <link rel="stylesheet" href="/css/bottom-nav.css" />
  <style>
    .card-page-container {
      max-width: 1000px;
      margin: 2rem auto;
      padding: 1rem;
    }

    .card-header {
      display: flex;
      flex-wrap: wrap;
      gap: 2rem;
    }

    .card-image {
      max-width: 300px;
      border-radius: 10px;
    }

    .card-info {
      flex: 1;
      font-size: 1rem;
    }

    .card-info p {
      margin-bottom: 0.5rem;
    }

    .card-section {
      margin-top: 2rem;
    }

    .card-section h2 {
      font-size: 1.2rem;
      margin-bottom: 0.5rem;
      border-bottom: 1px solid #555;
      padding-bottom: 0.25rem;
    }

    .card-grid {
      display: flex;
      overflow-x: auto;
      gap: 0.5rem;
    }

    .card-grid img {
      height: 150px;
      cursor: pointer;
      border-radius: 6px;
    }

    .link {
      color: #4ba8ff;
      text-decoration: underline;
    }

  .green { color: green; }
  .red { color: red; }


  </style>
</head>
<body>
    <div style="margin: 1rem 0; text-align: center;">
    <button onclick="goBackToSearch()" style="padding: 0.5rem 1rem; border-radius: 10px; background: #eee; border: 1px solid #aaa;">
      üîô Back to Search
    </button>
  </div>
  <div class="card-page-container">
    <div class="card-header">
      <div style="display: flex; flex-direction: column; align-items: center;">
        
        
        <div style="display: flex; justify-content: center; position: relative;">
          <div style="position: relative; display: inline-block;">
            <img src="<%= card.images.large || card.images.small %>" class="card-image" alt="<%= card.name %>">
            <button id="shareCardBtn"
              title="Share this card"
              style="position: absolute; bottom: -30px; right: 0; font-size: 0.85rem; padding: 6px 10px; background-color: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer;">
              üîó Share
            </button>
          </div>
        </div>


        <div style="margin-top: 0.75rem; text-align: center;">
            <% if (tags.length) { %>
            <% tags.forEach(t => { %>
                <span style="
                display: inline-block;
                background: #eee;
                color: #222;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 0.85rem;
                margin: 3px;
                "><%= t.tag %></span>
            <% }) %>
            <% } else { %>
            <p style="font-size: 0.85rem; color: #888;">No tags yet.</p>
            <% } %>
        </div>

        <div id="tag-entry-container" style="margin-top: 1rem; text-align: center;">
        <% if (isLoggedIn) { %>
            <% if (message) { %>
            <% const tagColor = message.type === 'success' ? 'green' : 'red'; %>
            <div id="tag-status" class="<%= tagColor %>" style="margin-top: 0.5rem;">
              <%= message.text %>
            </div>

            <% } %>

            <form id="tagForm" style="display: inline-flex; gap: 0.5rem;" method="POST" action="/submit-tag">
            <input type="hidden" name="cardId" value="<%= card.id %>">
            <input
                type="text"
                name="tag"
                placeholder="Add a tag..."
                required
                maxlength="20"
                style="padding: 5px 10px; border-radius: 10px; border: 1px solid #ccc;"
            >
            <button type="submit" style="padding: 5px 10px; border-radius: 10px; background: #222; color: white;">
                Add Tag
            </button>
            </form>
        <% } else { %>
            <p style="color: #888;">
              <a href="#" onclick="openLoginModal()" style="text-decoration: underline;">Log in</a> to add tags.
            </p>

        <% } %>
        </div>


    </div>


      <div class="card-info">
        <h1><%= card.name %></h1>
        <p><strong>Set:</strong> <%= card.set.name %> (<%= card.set.id %>)</p>
        <p><strong>Card Number:</strong> <%= card.number %></p>
        <p><strong>Supertype:</strong> <%= card.supertype %></p>
        <% if (card.subtypes) { %><p><strong>Subtypes:</strong> <%= card.subtypes.join(', ') %></p><% } %>
        <% if (card.level) { %><p><strong>Level:</strong> <%= card.level %></p><% } %>
        <% if (card.hp) { %><p><strong>HP:</strong> <%= card.hp %></p><% } %>
        <% if (card.types) { %><p><strong>Types:</strong> <%= card.types.join(', ') %></p><% } %>
        <% if (card.evolvesFrom) { %><p><strong>Evolves From:</strong> <%= card.evolvesFrom %></p><% } %>
        <% if (card.weaknesses) { %>
          <p><strong>Weaknesses:</strong>
            <%= card.weaknesses.map(w => `${w.type} √ó${w.value}`).join(', ') %>
          </p>
        <% } %>
        <% if (card.resistances) { %>
          <p><strong>Resistances:</strong>
            <%= card.resistances.map(r => `${r.type} ${r.value}`).join(', ') %>
          </p>
        <% } %>
        <% if (card.rarity) { %><p><strong>Rarity:</strong> <%= card.rarity %></p><% } %>
        <% if (card.artist) { %><p><strong>Artist:</strong> <%= card.artist %></p><% } %>

        <div style="margin-top: 1rem;">
          <strong>üõí Shop:</strong>
          <a href="<%= ebayFinal %>" target="_blank" class="link" style="margin-left: 0.5rem;">Search on eBay</a>
          <span style="margin: 0 6px;">|</span>
          <% if (card.tcgplayer?.url) { %>
            <a href="<%= card.tcgplayer.url %>" target="_blank" class="link">Find on TCGPlayer</a>
          <% } else { %>
            <span style="opacity: 0.6; pointer-events: none;">Find on TCGPlayer</span>
          <% } %>
        </div>

      </br>
        <% if (marketPrice) { %>
          <div class="market-price">
            üí∞ Market Price: $<%= marketPrice.toFixed(2) %>
          </div>
        <% } else { %>
          <div class="market-price">
            üí∞ Market Price: Not Available
          </div>
        <% } %>

      </div>
    </div>


    <% if (card.attacks?.length) { %>
      <div class="card-section">
        <h2>Attacks</h2>
        <ul>
          <% card.attacks.forEach(a => { %>
            <li><strong><%= a.name %></strong>: <%= a.text || 'No description' %></li>
          <% }) %>
        </ul>
      </div>
    <% } %>

    <% if (card.rules?.length) { %>
      <div class="card-section">
        <h2>Rules</h2>
        <ul>
          <% card.rules.forEach(rule => { %>
            <li><%= rule %></li>
          <% }) %>
        </ul>
      </div>
    <% } %>

    <div class="card-section">
      <h2>Similar Cards</h2>
      <div class="card-grid" id="similarCards">
        <% if (similarCards.length) { %>
            <% similarCards.forEach(c => { %>
              <a href="/card/<%= c.id %><%= typeof from !== 'undefined' && from ? '?from=' + from : '' %>">




                <img src="<%= c.images.small %>" alt="<%= c.name %>" title="<%= c.name %>">
                </a>
            <% }) %>
            <% } else { %>
            <p style="font-size: 0.9rem; color: #888;">No similar cards found.</p>
        <% } %>

      </div>
    </div>

    <div class="card-section">
      <h2>More from <%= card.set.name %></h2>
      <div class="card-grid" id="setCards">
        <% if (setCards.length) { %>
          <% setCards.forEach(c => { %>
            <a href="/card/<%= c.id %><%= typeof from !== 'undefined' && from ? '?from=' + from : '' %>">




                <img src="<%= c.images.small %>" alt="<%= c.name %>" title="<%= c.name %>">
                </a>
            <% }) %>
            <% } else { %>
            <p style="font-size: 0.9rem; color: #888;">No other cards found from this set.</p>
        <% } %>

      </div>
    </div>

    <div class="card-section">
      <h2>User Collections Containing This Card</h2>
        <% collectionsWithCard.forEach(col => { %>
        <div style="margin-bottom: 2rem; text-align: center;">
            <p style="font-weight: bold; margin-bottom: 0.5rem;"><%= col.name %></p>
            <div
            class="card-grid collection-preview"
            id="collection-<%= col._id %>"
            data-card-ids="<%= col.cards.slice(0, 3).join(',') %>"
            style="justify-content: center;"
            ></div>
        </div>
        <% }) %>


    </div>
  </div>

  <div id="loginModal" style="display: none; position: fixed; top: 20vh; left: 50%; transform: translateX(-50%);
    background: white; border-radius: 10px; padding: 1rem; z-index: 9999; width: 300px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
    <h3 style="margin-top: 0;">üîê Login</h3>
    <form id="loginPopupForm">
      <input type="email" name="email" placeholder="Email" required style="width: 100%; margin-bottom: 0.5rem;" />
      <input type="password" name="password" placeholder="Password" required style="width: 100%; margin-bottom: 0.5rem;" />
      <button type="submit" style="width: 100%; padding: 6px 0;">Log In</button>
      <p id="loginPopupError" style="color: red; font-size: 0.85rem;"></p>
    </form>
  </div>
  <div id="overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
    background: rgba(0,0,0,0.5); z-index: 9998;" onclick="closeLoginModal()">
  </div>

  <script>
    function goBackToSearch() {
      const urlParams = new URLSearchParams(window.location.search);
      const from = urlParams.get('from');
      if (from) {
        window.location.href = decodeURIComponent(from);
      } else {
        window.location.href = '/search';
      }
    }
  </script>


  <script>
  const tagStatus = document.getElementById('tag-status');
  if (tagStatus) {
    setTimeout(() => {
      tagStatus.style.transition = 'opacity 0.5s ease';
      tagStatus.style.opacity = '0';
      setTimeout(() => {
        tagStatus.remove();

        // ‚úÖ Remove message & type from URL without reloading
        const url = new URL(window.location);
        url.searchParams.delete('message');
        url.searchParams.delete('type');
        window.history.replaceState({}, document.title, url.toString());

      }, 500);
    }, 3000);
  }
</script>


  <script>
  function openLoginModal() {
    document.getElementById('loginModal').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';
  }

  function closeLoginModal() {
    document.getElementById('loginModal').style.display = 'none';
    document.getElementById('overlay').style.display = 'none';
  }

  document.getElementById('loginPopupForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target;
    const email = form.email.value.trim();
    const password = form.password.value.trim();

    try {
      const res = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });

      const result = await res.json();

      if (res.ok) {
        window.location.reload(); // ‚úÖ Refresh to now show tag input
      } else {
        document.getElementById('loginPopupError').textContent = result.message || 'Login failed';
      }
    } catch (err) {
      console.error('Login error:', err);
      document.getElementById('loginPopupError').textContent = 'Unexpected error during login';
    }
  });
</script>

<script>
  const loadedCollections = new Set();

  document.querySelectorAll('.collection-preview').forEach(async (container) => {
    const id = container.id;
    if (loadedCollections.has(id)) return;
    loadedCollections.add(id);

    const ids = container.dataset.cardIds.split(',');

    for (const cardId of ids) {
      try {
        const res = await fetch(`https://api.pokemontcg.io/v2/cards/${cardId}`);
        const data = await res.json();
        const card = data.data;

        const link = document.createElement('a');
        link.href = `/card/${card.id}`;
        link.innerHTML = `<img src="${card.images.small}" alt="${card.name}" title="${card.name}" style="height: 100px;">`;
        container.appendChild(link);
      } catch (err) {
        console.error(`‚ùå Error loading card ${cardId}:`, err);
      }
    }
  });
</script>

<script>
  if (tagStatus) {
    setTimeout(() => {
      tagStatus.style.transition = 'opacity 0.5s ease';
      tagStatus.style.opacity = '0';
      setTimeout(() => tagStatus.remove(), 500);
    }, 3000);
  }
</script>

<script>
  const shareBtn = document.getElementById('shareCardBtn');
  if (shareBtn) {
    const url = window.location.href;
    shareBtn.addEventListener('click', async () => {
      if (navigator.share) {
        try {
          await navigator.share({
            title: document.title,
            url
          });
        } catch (err) {
          console.error('‚ùå Share canceled or failed:', err);
        }
      } else {
        try {
          await navigator.clipboard.writeText(url);
          shareBtn.textContent = '‚úÖ Link Copied!';
          setTimeout(() => shareBtn.textContent = 'üîó Share', 1500);
        } catch {
          alert('‚ùå Failed to copy link.');
        }
      }
    });
  }
</script>


</body>
</html>
