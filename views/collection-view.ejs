<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Collection Viewer</title>
  <link rel="stylesheet" href="/style.css" />
  <link rel="stylesheet" href="/css/tagging-center.css" />
  <link rel="stylesheet" href="/css/bottom-nav.css" />
  <style>
    body {
      font-family: sans-serif;
      background-color: #f4f6f9;
      margin: 0;
      padding: 2rem;
    }

    .collection-header {
      max-width: 1000px;
      margin: auto;
      text-align: center;
      margin-bottom: 2rem;
    }

    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
      gap: 1rem;
      max-width: 1000px;
      margin: auto;
    }

    .card-grid img {
      width: 100%;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .card-grid img:hover {
      transform: scale(1.03);
    }

    #backBtn {
      display: block;
      margin: 2rem auto;
      text-align: center;
      color: #444;
      text-decoration: none;
      font-weight: bold;
    }

  </style>
  
</head>
<body>

  <div class="collection-header" style="position: relative;">
    <div style="position: absolute; top: 0; right: 0;">
      <button id="shareCollectionBtn" style="padding: 6px 10px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer;">
        üîó Share Collection
      </button>
      <div style="margin-top: 0.5rem; display: flex; justify-content: flex-end; gap: 0.5rem;">
        <a id="twitterShare" target="_blank">üê¶</a>
        <a id="redditShare" target="_blank">üëΩ</a>
      </div>
    </div>
    <h2 id="collectionName">Loading...</h2>
    <p id="ownerInfo"></p>
    <p id="cardCount"></p>
    <p id="collectionValue">Loading value...</p>
  </div>


  <div class="card-grid" id="cardGrid">Loading cards...</div>

  <a href="javascript:history.back()" id="backBtn">‚Üê Back to Profile</a>




  <script>
    const collectionId = "<%= collectionId %>";
    const sessionUserId = "<%= sessionUserId %>";


    async function loadCollection() {
      try {
        const res = await fetch(`/api/collections/${collectionId}`);
        const data = await res.json();

        if (!res.ok || !data) {
          document.body.innerHTML = '<h2>‚ùå Collection not found or is private.</h2>';
          return;
        }

        document.getElementById('collectionName').textContent = data.name;
        document.getElementById('ownerInfo').textContent = `Visibility: ${data.visibility}`;
        document.getElementById('cardCount').textContent = `${data.cards.length} card${data.cards.length !== 1 ? 's' : ''}`;

        const grid = document.getElementById('cardGrid');
        grid.innerHTML = '';

        let totalValue = 0;

        for (const id of data.cards) {
            try {
                const cardRes = await fetch(`https://api.pokemontcg.io/v2/cards/${id}`);
                const cardData = await cardRes.json();
                const card = cardData.data;

                // üî¢ Calculate price
                if (card?.tcgplayer?.prices) {
                  for (const variant in card.tcgplayer.prices) {
                    const price = card.tcgplayer.prices[variant]?.market;
                    if (typeof price === 'number') {
                      totalValue += price;
                      break; // use first valid price
                    }
                  }
                }

                // üî≥ Wrap card image and button in a container
                const wrapper = document.createElement('div');
                wrapper.style.position = 'relative';
                wrapper.style.textAlign = 'center';
                wrapper.dataset.cardId = card.id;


                const img = document.createElement('img');
                img.src = card.images.small;
                img.alt = card.name;
                img.style.width = '100%';
                img.addEventListener('click', () => openCardPopup(card, { mode: 'view' }));

                wrapper.appendChild(img);

                // üóë Add Remove Button only if owner
                if (sessionUserId && sessionUserId === data.userId) {
                const removeBtn = document.createElement('button');
                removeBtn.textContent = 'üóë';
                removeBtn.title = 'Remove from collection';
                removeBtn.style.position = 'absolute';
                removeBtn.style.bottom = '8px';
                removeBtn.style.left = '50%';
                removeBtn.style.transform = 'translateX(-50%)';
                removeBtn.style.padding = '2px 6px';
                removeBtn.style.fontSize = '0.9rem';
                removeBtn.style.background = '#e74c3c';
                removeBtn.style.color = 'white';
                removeBtn.style.border = 'none';
                removeBtn.style.borderRadius = '4px';
                removeBtn.style.cursor = 'pointer';

                removeBtn.addEventListener('click', async (e) => {
                    e.stopPropagation(); // prevent popup from opening
                    const confirmed = confirm(`Remove "${card.name}" from this collection?`);
                    if (!confirmed) return;

                    try {
                    const res = await fetch(`/api/collections/${collectionId}/remove/${card.id}`, {
                        method: 'DELETE'
                    });

                    if (res.ok) {
                        wrapper.remove(); // remove whole card
                    } else {
                        alert('‚ùå Failed to remove card.');
                    }
                    } catch (err) {
                    console.error('‚ùå Error removing card:', err);
                    alert('Server error');
                    }
                });

                wrapper.appendChild(removeBtn);
                }

                grid.appendChild(wrapper);
            } catch (err) {
                console.warn('‚ùå Failed to load card:', id);
            }
            } //FOR LOOP IS FINISHED HERE
            
            document.getElementById('collectionValue').textContent =
              `Estimated Total Value: $${totalValue.toFixed(2)}`;


            // üß≤ Make the card grid sortable
            new Sortable(document.getElementById('cardGrid'), {
            animation: 150,
            onEnd: () => {
                const newOrder = Array.from(document.querySelectorAll('#cardGrid > div'))
                .map(wrapper => wrapper.dataset.cardId)
                .filter(Boolean);

                console.log('üì¶ New order:', newOrder);
                saveNewOrder(newOrder); // We'll write this in Step 3
            }
            });



        

// FINAL CATCH FOR LOADCOLLECTION()
      } catch (err) {
        console.error('‚ùå Error loading collection:', err);
        document.body.innerHTML = '<h2>‚ùå Error loading collection.</h2>';
      }
    } // END loadCollection function

    document.getElementById('shareCollectionBtn').addEventListener('click', async () => {
      const shareUrl = `${location.origin}/collection/${collectionId}`;
      if (navigator.share) {
        try {
          await navigator.share({ title: 'Check out this collection on CardVerse!', url: shareUrl });
        } catch (err) {
          console.error('‚ùå Share cancelled:', err);
        }
      } else {
        try {
          await navigator.clipboard.writeText(shareUrl);
          alert('‚úÖ Link copied to clipboard!');
        } catch {
          alert('‚ùå Failed to copy link.');
        }
      }
    });

    document.getElementById('twitterShare').href =
      `https://twitter.com/intent/tweet?text=Check out this awesome Pok√©mon card collection!&url=${encodeURIComponent(location.href)}`;

    document.getElementById('redditShare').href =
      `https://www.reddit.com/submit?url=${encodeURIComponent(location.href)}&title=Check out this Pok√©mon card collection on CardVerse!`;


    // New functions

    async function saveNewOrder(newOrder) {
        try {
            const res = await fetch(`/api/collections/${collectionId}/reorder`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ newOrder })
            });

            if (!res.ok) {
            console.error('‚ùå Failed to save new order');
            alert('Failed to update card order.');
            } else {
            console.log('‚úÖ Card order saved.');
            }
        } catch (err) {
            console.error('‚ùå Error saving order:', err);
            alert('Server error while saving order.');
        }
        }




    loadCollection();
  </script>
  <script src="/js/tagging-center.js" defer></script>
  <script type="module" src="/js/script.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

</body>
</html>
